{"version":3,"sources":["App.js","Heading.js","Frame/Page.js","Frame/FrameApp.js","Frame/index.js","Dynamic/index.js","Dynamic/DynamicApp.js","serviceWorker.js","index.js"],"names":["Link","title","onClick","handleClick","useCallback","event","preventDefault","href","toLowerCase","replace","getAppUrl","appName","url","process","encodeURIComponent","console","log","App","useState","page","setPage","pageToLoad","setTimeout","useAppState","loadApp","className","width","height","src","Heading","children","child","Children","only","childRef","useRef","useEffect","timerId","current","focus","clearTimeout","cloneElement","tabIndex","ref","idx","contents","Page","SwitchPage","FrameApp","usePageState","loadPage","DynamicApp","Boolean","window","location","hostname","match","rootAppName","QS","parse","search","ignoreQueryPrefix","isAppInIframe","globalThis","self","top","ReactDOM","render","Frame","document","getElementById","Dynamic","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8SAoBMA,G,MAAO,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACfC,EAAcC,uBAAY,SAAAC,GAC9BA,EAAMC,iBACNJ,MACC,CAACA,IACJ,OAAO,uBAAGK,KAAI,mBAAcN,EAAMO,cAAcC,QAAQ,QAAS,MAAQP,QAASC,GAAcF,KAG5FS,EAAY,SAAAC,GAChB,IAAMC,EAzBeC,kBAyBT,oBAA2CC,mBAAmBH,IAE1E,OADAI,QAAQC,IAAI,MAAOJ,GACZA,GAyBMK,MAtBf,WAAgB,IAAD,EA3BK,WAAO,IAAD,EACAC,mBAAS,SADT,mBACjBC,EADiB,KACXC,EADW,KAUxB,MAAO,CAACD,EARSf,uBAAY,SAACiB,GAC5BD,EALY,WAMZE,YAAW,WACTF,EAAQC,KACP,OACF,KAqBwBE,GADd,mBACNZ,EADM,KACGa,EADH,KAEb,OACE,yBAAKC,UAAU,OACb,gCACE,kEACA,6FAEF,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAMvB,QAAS,kBAAMsB,EAAQ,UAAUvB,MAAM,eAC7C,kBAAC,EAAD,CAAMC,QAAS,kBAAMsB,EAAQ,SAASvB,MAAM,iBAE9C,yBAAKwB,UAAU,cAAf,gBAAyC,gCAzC/B,YAyCwCd,EAAsB,UAAYA,IACpF,yBAAKc,UAAU,gBA1CL,YA2CPd,EACG,yBACA,4BAAQe,MAAM,MAAMC,OAAO,MAAMC,IAAKlB,EAAUC,GAAUV,MAAM,kBChD/D4B,G,MAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClBC,EAAQC,WAASC,KAAKH,GACtBI,EAAWC,mBAWjB,OATAC,qBAAU,WACR,IAAMC,EAAUf,YAAW,WACzBY,EAASI,QAAQC,UAChB,KACH,OAAO,WACLC,aAAaH,MAEd,CAACN,IAEGU,uBAAaV,EAAO,CAAEW,SAAU,KAAMC,IAAKT,MCZhDU,EAAM,EACJC,EAAW,CAAC,+2BAAD,89CAOJC,EAAO,SAAC,GAAe,IAAb7C,EAAY,EAAZA,MACrB,OACE,6BACE,kBAAC,EAAD,KACE,4BAAKA,IAEP,6BACE,2BATiB4C,EAAUD,IAAS,OCLtCG,EAAa,SAAC,GAClB,OAD+B,EAAX5B,MAElB,IAAK,MACH,OAAO,kBAAC,EAAD,CAAMlB,MAAM,aACrB,IAAK,MACH,OAAO,kBAAC,EAAD,CAAMA,MAAM,aACrB,IAAK,QACH,OAAO,kBAAC,EAAD,CAAMA,MAAM,eACrB,QACE,OAAO,6CAIPD,EAAO,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACfC,EAAcC,uBAAY,SAAAC,GAC9BA,EAAMC,iBACNJ,MACC,CAACA,IACJ,OAAO,uBAAGK,KAAI,wBAAmBN,EAAMO,eAAiBN,QAASC,GAAcF,ICpBlE+C,MDoCR,WAAqB,IAAD,EAbN,WAAO,IAAD,EACD9B,mBAAS,OADR,mBAClBC,EADkB,KACZC,EADY,KAUzB,MAAO,CAACD,EARSf,uBAAY,SAACiB,GAC5BD,EAAQ,WACRE,YAAW,WACTF,EAAQC,KACP,OACF,KAOsB4B,GADA,mBAClB9B,EADkB,KACZ+B,EADY,KAEzB,OACE,yBAAKzB,UAAU,OACH,YAATN,EACG,kBACA,oCACA,yBAAKM,UAAU,OACb,kBAAC,EAAD,CAAMvB,QAAS,kBAAMgD,EAAS,QAAQjD,MAAM,QAC5C,kBAAC,EAAD,CAAMC,QAAS,kBAAMgD,EAAS,QAAQjD,MAAM,QAC5C,kBAAC,EAAD,CAAMC,QAAS,kBAAMgD,EAAS,UAAUjD,MAAM,WAEhD,kBAAC,EAAD,CAAYkB,KAAMA,OEhDbgC,G,MCEW,SAAC,GAAiB,IAAfxC,EAAc,EAAdA,QAC3B,OACE,yBAAKc,UAAU,OACb,gCACE,kBAAC,EAAD,KACE,wBAAIiB,SAAS,KAAb,6BAEF,6BACE,8GACA,gHAGJ,0CAAgB/B,MCJFyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICTWC,EAAgBC,IAAGC,MAAMN,OAAOC,SAASM,OAAQ,CAAEC,mBAAmB,IAA/ElD,QAEFmD,EAAgBC,WAAWC,OAASD,WAAWE,IAGrD,OAFAlD,QAAQC,IAAI,cAAeyC,EAAa,gBAAiBK,GAEjDL,GACN,IAAK,QACHS,IAASC,OAAO,kBAACC,EAAD,MAAcC,SAASC,eAAe,SACtD,MACF,IAAK,OACL,IAAK,OACL,IAAK,OACHJ,IAASC,OAAO,kBAACI,EAAD,CAAY5D,QAAS8C,IAAiBY,SAASC,eAAe,SAC9E,MACF,SACwB,IAAlBR,GACFI,IAASC,OAAO,kBAAC,EAAD,MAASE,SAASC,eAAe,SD0GjD,kBAAmBE,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,c","file":"static/js/main.60cd591c.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport './App.css';\n\nconst __DEV__ = process.env.NODE_ENV !== 'production';\nconst { PUBLIC_URL } = process.env;\nconst LOADING = 'loading';\n\nconst useAppState = () => {\n  const [page, setPage] = useState('frame');\n  const loadPage = useCallback((pageToLoad) => {\n    setPage(LOADING);\n    setTimeout(() => {\n      setPage(pageToLoad);\n    }, 1000);\n  }, []);\n\n\n  return [page, loadPage];\n};\n\nconst Link = ({ title, onClick }) => {\n  const handleClick = useCallback(event => {\n    event.preventDefault();\n    onClick();\n  }, [onClick]);\n  return <a href={`#link-to-${title.toLowerCase().replace(/[^\\w]/, '-')}`} onClick={handleClick}>{title}</a>;\n};\n\nconst getAppUrl = appName => {\n  const url = (__DEV__ ? '' : PUBLIC_URL) + `/?appName=${encodeURIComponent(appName)}`;\n  console.log('url', url);\n  return url;\n};\n\nfunction App() {\n  const [appName, loadApp] = useAppState();\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>NVDA not working well with iframes</h1>\n        <p>Click on apps to load the iframe content with different apps.</p>\n      </header>\n      <nav className=\"Nav\">\n        <Link onClick={() => loadApp('frame')} title=\"iFrame App\" />\n        <Link onClick={() => loadApp('app2')} title=\"Dynamic App\" />\n      </nav>\n      <div className=\"CurrentApp\">Current app: <strong>{appName === LOADING ? 'unknown' : appName}</strong></div>\n      <div className=\"FrameWrapper\">\n        {appName === LOADING\n          ? 'Loading application...'\n          : <iframe width=\"800\" height=\"500\" src={getAppUrl(appName)} title=\"Some title\" />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { cloneElement, Children, useRef, useEffect } from 'react'\n\nexport const Heading = ({ children }) => {\n  const child = Children.only(children);\n  const childRef = useRef();\n\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      childRef.current.focus()\n    }, 200);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [child])\n\n  return cloneElement(child, { tabIndex: '-1', ref: childRef });\n}\n","import React from 'react';\nimport { Heading } from '../Heading';\n\nlet idx = 0;\nconst contents = [\n  `Curabitur nec leo arcu. In laoreet nisl vitae condimentum rhoncus. Nullam fringilla nulla non nisi vestibulum tincidunt. Aliquam erat volutpat. Curabitur dictum ligula ullamcorper dui consectetur, sed elementum risus dictum. Donec finibus, nibh ac lacinia consequat, est leo tincidunt leo, a pharetra ligula libero a est. Nam purus nisi, feugiat in felis eget, condimentum ultrices urna. Mauris pretium ut est nec consequat. Etiam eu ultrices ligula. Maecenas malesuada, ex vel pretium posuere, orci nisl elementum odio, at sodales risus enim at neque. Integer non nibh nisi. Duis placerat nisl id lectus pulvinar, sed posuere felis consectetur. Aenean laoreet pellentesque tortor, mollis convallis libero elementum vel. Cras non mollis mauris. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Etiam interdum sed massa vel tincidunt.`,\n  `Fusce quis laoreet orci. Morbi mollis, ante ut rhoncus interdum, est velit egestas purus, nec facilisis eros sem ut elit. Duis varius ex vitae iaculis tempus. Nullam rutrum, nunc non faucibus mattis, nulla nisi fermentum dolor, eget volutpat justo est at velit. Sed interdum tristique urna, nec pulvinar metus sodales nec. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Integer id mauris volutpat, maximus tellus ac, posuere libero. Cras eget pharetra eros. Etiam dictum odio sit amet libero posuere, non suscipit augue auctor. Vivamus aliquet vel urna sit amet euismod. Sed facilisis ante felis, sit amet blandit diam rutrum et. Donec elit sem, mollis et viverra nec, tempor ut felis.`,\n  `Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.`,\n];\nconst getContent = () => contents[(idx++) % 3];\n\nexport const Page = ({ title }) => {\n  return (\n    <div>\n      <Heading>\n        <h1>{title}</h1>\n      </Heading>\n      <div>\n        <p>{getContent()}</p>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useCallback } from 'react';\nimport './FrameApp.css';\nimport { Page } from './Page';\n\nconst SwitchPage = ({ page }) => {\n  switch (page) {\n    case 'one':\n      return <Page title='Page One' />;\n    case 'two':\n      return <Page title='Page Two' />;\n    case 'three':\n      return <Page title='Page Three' />;\n    default:\n      return <div>Loading...</div>;\n  }\n};\n\nconst Link = ({ title, onClick }) => {\n  const handleClick = useCallback(event => {\n    event.preventDefault();\n    onClick();\n  }, [onClick]);\n  return <a href={`#link-to-page-${title.toLowerCase()}`} onClick={handleClick}>{title}</a>;\n};\n\nconst usePageState = () => {\n  const [page, setPage] = useState('one');\n  const loadPage = useCallback((pageToLoad) => {\n    setPage('loading');\n    setTimeout(() => {\n      setPage(pageToLoad);\n    }, 1000);\n  }, []);\n\n\n  return [page, loadPage];\n};\n\nexport function FrameApp() {\n  const [page, loadPage] = usePageState();\n  return (\n    <div className=\"App\">\n      {page === 'loading'\n        ? 'Loading page...'\n        : <>\n          <nav className=\"Nav\">\n            <Link onClick={() => loadPage('one')} title=\"One\" />\n            <Link onClick={() => loadPage('two')} title=\"Two\" />\n            <Link onClick={() => loadPage('three')} title=\"Three\" />\n          </nav>\n          <SwitchPage page={page} />\n        </>}\n    </div>\n  );\n}\n","import { FrameApp } from './FrameApp';\n\nexport default FrameApp;\n","import { DynamicApp } from './DynamicApp';\n\nexport default DynamicApp;\n","import React from 'react';\nimport './DynamicApp.css';\nimport { Heading } from '../Heading';\n\nexport const DynamicApp = ({ appName }) => {\n  return (\n    <div className=\"App\">\n      <header>\n        <Heading>\n          <h1 tabIndex=\"0\">Some Dynamic Application</h1>\n        </Heading>\n        <div>\n          <p>Turn on NVDA and once the focus is on the heading above press (Arrow down) key.</p>\n          <p>This text must be read after pressing Arrow down if everything works correctly.</p>\n        </div>\n      </header>\n      <div>App name: {appName}</div>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport QS from 'qs';\nimport './index.css';\nimport App from './App';\nimport FrameApp from './Frame';\nimport DynamicApp from './Dynamic';\nimport * as serviceWorker from './serviceWorker';\n\nconst { appName: rootAppName } = QS.parse(window.location.search, { ignoreQueryPrefix: true });\n// eslint-disable-next-line no-undef\nconst isAppInIframe = globalThis.self !== globalThis.top;\nconsole.log('rootAppName', rootAppName, 'isAppInIframe', isAppInIframe);\n\nswitch (rootAppName) {\n  case 'frame':\n    ReactDOM.render(<FrameApp />, document.getElementById('root'));\n    break;\n  case 'app1':\n  case 'app2':\n  case 'app3':\n    ReactDOM.render(<DynamicApp appName={rootAppName} />, document.getElementById('root'));\n    break;\n  default:\n    if (isAppInIframe === false) {\n      ReactDOM.render(<App />, document.getElementById('root'));\n    }\n    break;\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}